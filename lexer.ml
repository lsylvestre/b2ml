# 10 "lexer.mll"
  
open Err
open Parser

let keyword_table = Hashtbl.create 123
let () =
  List.iter (fun (kwd, tok) -> Hashtbl.add keyword_table kwd tok)
    [
        ( "ASSERT", ASSERT);
        ( "BEGIN", BEGIN);
        (* ( "BOOL", BOOL); *)
        ( "CASE", CASE);
        ( "CONCRETE_CONSTANTS", CONCRETE_CONSTANTS);
        ( "CONCRETE_VARIABLES", CONCRETE_VARIABLES);
        ( "CONSTANTS", CONSTANTS);
        ( "DO", DO);
        ( "EITHER", EITHER);
        ( "ELSE", ELSE);
        ( "ELSIF", ELSIF);
        ( "END", END);
        ( "EXTENDS", EXTENDS);
        ( "FALSE", FALSE);
        ( "IF", IF);
        ( "IMPLEMENTATION", IMPLEMENTATION);
        ( "IMPORTS", IMPORTS);
        ( "IN", IN);
        ( "INCLUDES", INCLUDES);
        ( "INITIALISATION", INITIALISATION);
        ( "INT", INT);
        ( "LOCAL_OPERATIONS", LOCAL_OPERATIONS);
        ( "MACHINE", MACHINE);
        ( "MAXINT", MAXINT);
        ( "MININT", MININT);
        ( "NAT", NAT);
        ( "NAT1", NAT1);
        ( "OF", OF);
        ( "OPERATIONS", OPERATIONS);
        ( "OR", OR);
        ( "POW", POW);
        ( "PROMOTES", PROMOTES);
        ( "REFINES", REFINES);
        ( "REFINEMENT", REFINEMENT);
        ( "SEES", SEES);
        ( "SETS", SETS);
        ( "PRE", PRE);
        ( "THEN", THEN);
        ( "TRUE", TRUE);
        ( "USES", USES);
        ( "VALUES", VALUES);
        ( "VAR", VAR);
        ( "VARIANT", VARIANT);
        ( "WHILE", WHILE);
        ( "bool", Bool);
        ( "mod", Mod);
        ( "not", Not);
        ( "or", Or);
        ( "pred",Pred);
        ( "rec", Rec);
        ( "skip", Skip);
        ( "struct", Struct);
        ( "succ", Succ);
        ( "EXTERNAL", EXTERNAL);
        ( "BOOL",T_BOOL);
        ( "STRING", T_STRING);
        ( "OPERATION",T_OPERATION); 
    ]

# 70 "lexer.ml"
let __ocaml_lex_tables = {
  Lexing.lex_base =
   "\000\000\218\255\219\255\222\255\223\255\078\000\153\000\163\000\
    \226\255\018\000\228\255\003\000\231\255\176\000\235\255\030\000\
    \180\000\046\000\194\000\244\255\245\255\051\000\248\255\249\255\
    \250\255\251\255\002\000\118\000\028\000\023\000\033\000\029\000\
    \024\000\000\000\119\000\020\000\032\000\053\000\255\255\058\000\
    \070\000\254\255\064\000\001\000\058\000\104\000\114\000\127\000\
    \129\000\253\255\252\255\003\000\246\255\032\000\242\255\240\255\
    \220\255\221\255\238\255\236\255\232\255\186\000\233\255\229\255\
    \170\000\227\255\236\000\035\001\223\000\253\255\254\255\187\000\
    \255\255\001\000\254\255\255\255";
  Lexing.lex_backtrk =
   "\255\255\255\255\255\255\255\255\255\255\031\000\030\000\030\000\
    \255\255\037\000\255\255\025\000\255\255\021\000\255\255\018\000\
    \016\000\014\000\012\000\255\255\255\255\008\000\255\255\255\255\
    \255\255\255\255\037\000\037\000\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\030\000\255\255\255\255\255\255\002\000\
    \255\255\255\255\255\255\255\255";
  Lexing.lex_default =
   "\001\000\000\000\000\000\000\000\000\000\255\255\255\255\255\255\
    \000\000\255\255\000\000\255\255\000\000\255\255\000\000\255\255\
    \255\255\255\255\255\255\000\000\000\000\255\255\000\000\000\000\
    \000\000\000\000\051\000\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\000\000\255\255\
    \255\255\000\000\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\000\000\000\000\051\000\000\000\255\255\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\255\255\000\000\000\000\
    \255\255\000\000\255\255\255\255\069\000\000\000\000\000\255\255\
    \000\000\074\000\000\000\000\000";
  Lexing.lex_trans =
   "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\003\000\004\000\075\000\000\000\004\000\075\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \003\000\000\000\026\000\027\000\050\000\050\000\025\000\024\000\
    \023\000\022\000\021\000\020\000\019\000\018\000\017\000\016\000\
    \007\000\006\000\006\000\006\000\006\000\006\000\006\000\006\000\
    \006\000\006\000\015\000\014\000\013\000\012\000\011\000\064\000\
    \063\000\005\000\005\000\005\000\005\000\005\000\005\000\005\000\
    \005\000\005\000\005\000\005\000\005\000\005\000\005\000\005\000\
    \005\000\005\000\005\000\005\000\005\000\005\000\005\000\005\000\
    \005\000\005\000\005\000\059\000\055\000\052\000\054\000\034\000\
    \044\000\005\000\005\000\005\000\005\000\005\000\005\000\005\000\
    \005\000\005\000\005\000\005\000\005\000\005\000\005\000\005\000\
    \005\000\005\000\005\000\005\000\005\000\005\000\005\000\005\000\
    \005\000\005\000\005\000\010\000\009\000\008\000\005\000\005\000\
    \005\000\005\000\005\000\005\000\005\000\005\000\005\000\005\000\
    \042\000\030\000\031\000\032\000\033\000\039\000\037\000\005\000\
    \005\000\005\000\005\000\005\000\005\000\005\000\005\000\005\000\
    \005\000\005\000\005\000\005\000\005\000\005\000\005\000\005\000\
    \005\000\005\000\005\000\005\000\005\000\005\000\005\000\005\000\
    \005\000\038\000\040\000\041\000\043\000\005\000\045\000\005\000\
    \005\000\005\000\005\000\005\000\005\000\005\000\005\000\005\000\
    \005\000\005\000\005\000\005\000\005\000\005\000\005\000\005\000\
    \005\000\005\000\005\000\005\000\005\000\005\000\005\000\005\000\
    \005\000\006\000\006\000\006\000\006\000\006\000\006\000\006\000\
    \006\000\006\000\006\000\006\000\006\000\006\000\006\000\006\000\
    \006\000\006\000\006\000\006\000\006\000\061\000\056\000\028\000\
    \036\000\046\000\047\000\057\000\048\000\049\000\029\000\062\000\
    \065\000\070\000\072\000\035\000\070\000\060\000\000\000\053\000\
    \000\000\058\000\007\000\006\000\006\000\006\000\006\000\006\000\
    \006\000\006\000\006\000\006\000\000\000\000\000\000\000\000\000\
    \002\000\255\255\255\255\255\255\000\000\000\000\000\000\000\000\
    \000\000\071\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\066\000\067\000\067\000\067\000\067\000\
    \067\000\067\000\067\000\067\000\067\000\067\000\067\000\067\000\
    \067\000\067\000\067\000\067\000\067\000\067\000\067\000\067\000\
    \067\000\067\000\067\000\067\000\067\000\067\000\067\000\067\000\
    \067\000\067\000\067\000\067\000\067\000\067\000\067\000\067\000\
    \067\000\067\000\067\000\067\000\067\000\067\000\067\000\067\000\
    \067\000\067\000\067\000\067\000\067\000\067\000\067\000\067\000\
    \067\000\067\000\067\000\067\000\067\000\067\000\067\000\067\000\
    \067\000\067\000\067\000\067\000\067\000\067\000\067\000\067\000\
    \067\000\067\000\067\000\067\000\067\000\067\000\067\000\067\000\
    \067\000\067\000\067\000\067\000\067\000\067\000\067\000\067\000\
    \067\000\067\000\067\000\067\000\067\000\067\000\067\000\067\000\
    \067\000\067\000\067\000\067\000\067\000\067\000\067\000\067\000\
    \067\000\067\000\067\000\067\000\067\000\067\000\067\000\067\000\
    \067\000\067\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\255\255\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000";
  Lexing.lex_check =
   "\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\000\000\000\000\073\000\255\255\000\000\073\000\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \000\000\255\255\000\000\000\000\026\000\051\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\009\000\
    \011\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\015\000\017\000\021\000\053\000\033\000\
    \043\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\005\000\005\000\
    \005\000\005\000\005\000\005\000\005\000\005\000\005\000\005\000\
    \028\000\029\000\030\000\031\000\032\000\035\000\036\000\005\000\
    \005\000\005\000\005\000\005\000\005\000\005\000\005\000\005\000\
    \005\000\005\000\005\000\005\000\005\000\005\000\005\000\005\000\
    \005\000\005\000\005\000\005\000\005\000\005\000\005\000\005\000\
    \005\000\037\000\039\000\040\000\042\000\005\000\044\000\005\000\
    \005\000\005\000\005\000\005\000\005\000\005\000\005\000\005\000\
    \005\000\005\000\005\000\005\000\005\000\005\000\005\000\005\000\
    \005\000\005\000\005\000\005\000\005\000\005\000\005\000\005\000\
    \005\000\006\000\006\000\006\000\006\000\006\000\006\000\006\000\
    \006\000\006\000\006\000\007\000\007\000\007\000\007\000\007\000\
    \007\000\007\000\007\000\007\000\007\000\013\000\016\000\027\000\
    \034\000\045\000\046\000\016\000\047\000\048\000\027\000\061\000\
    \064\000\068\000\071\000\034\000\068\000\013\000\255\255\018\000\
    \255\255\016\000\018\000\018\000\018\000\018\000\018\000\018\000\
    \018\000\018\000\018\000\018\000\255\255\255\255\255\255\255\255\
    \000\000\073\000\026\000\051\000\255\255\255\255\255\255\255\255\
    \255\255\068\000\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\007\000\066\000\066\000\066\000\066\000\
    \066\000\066\000\066\000\066\000\066\000\066\000\066\000\066\000\
    \066\000\066\000\066\000\066\000\066\000\066\000\066\000\066\000\
    \066\000\066\000\066\000\066\000\066\000\066\000\066\000\066\000\
    \066\000\066\000\066\000\066\000\066\000\066\000\066\000\066\000\
    \066\000\066\000\066\000\066\000\066\000\066\000\066\000\066\000\
    \066\000\066\000\066\000\066\000\066\000\066\000\066\000\066\000\
    \066\000\066\000\066\000\067\000\067\000\067\000\067\000\067\000\
    \067\000\067\000\067\000\067\000\067\000\067\000\067\000\067\000\
    \067\000\067\000\067\000\067\000\067\000\067\000\067\000\067\000\
    \067\000\067\000\067\000\067\000\067\000\067\000\067\000\067\000\
    \067\000\067\000\067\000\067\000\067\000\067\000\067\000\067\000\
    \067\000\067\000\067\000\067\000\067\000\067\000\067\000\067\000\
    \067\000\067\000\067\000\067\000\067\000\067\000\067\000\067\000\
    \067\000\067\000\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\068\000\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255";
  Lexing.lex_base_code =
   "";
  Lexing.lex_backtrk_code =
   "";
  Lexing.lex_default_code =
   "";
  Lexing.lex_trans_code =
   "";
  Lexing.lex_check_code =
   "";
  Lexing.lex_code =
   "";
}

let rec token lexbuf =
   __ocaml_lex_token_rec lexbuf 0
and __ocaml_lex_token_rec lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
# 82 "lexer.mll"
               ( PRINT_INT )
# 266 "lexer.ml"

  | 1 ->
# 83 "lexer.mll"
                ( PRINT_TYPE )
# 271 "lexer.ml"

  | 2 ->
# 84 "lexer.mll"
               ( ILL_TYPED )
# 276 "lexer.ml"

  | 3 ->
let
# 87 "lexer.mll"
                      s
# 282 "lexer.ml"
= Lexing.sub_lexeme lexbuf (lexbuf.Lexing.lex_start_pos + 1) (lexbuf.Lexing.lex_curr_pos + -1) in
# 87 "lexer.mll"
                               ( STRING_LITERAL(s) )
# 286 "lexer.ml"

  | 4 ->
# 88 "lexer.mll"
         ( AMPERSAND )
# 291 "lexer.ml"

  | 5 ->
# 89 "lexer.mll"
         ( QUOTE )
# 296 "lexer.ml"

  | 6 ->
# 90 "lexer.mll"
         ( LPAREN )
# 301 "lexer.ml"

  | 7 ->
# 91 "lexer.mll"
         ( RPAREN )
# 306 "lexer.ml"

  | 8 ->
# 92 "lexer.mll"
         ( STAR )
# 311 "lexer.ml"

  | 9 ->
# 93 "lexer.mll"
         ( STAR_STAR )
# 316 "lexer.ml"

  | 10 ->
# 94 "lexer.mll"
         ( PLUS )
# 321 "lexer.ml"

  | 11 ->
# 95 "lexer.mll"
         ( COMMA )
# 326 "lexer.ml"

  | 12 ->
# 96 "lexer.mll"
         ( MINUS )
# 331 "lexer.ml"

  | 13 ->
# 97 "lexer.mll"
          ( MINUS_MINUS_GT )
# 336 "lexer.ml"

  | 14 ->
# 98 "lexer.mll"
         ( DOT )
# 341 "lexer.ml"

  | 15 ->
# 99 "lexer.mll"
         ( DOT_DOT )
# 346 "lexer.ml"

  | 16 ->
# 100 "lexer.mll"
         ( SLASH )
# 351 "lexer.ml"

  | 17 ->
# 101 "lexer.mll"
         ( SLASH_EQ )
# 356 "lexer.ml"

  | 18 ->
# 102 "lexer.mll"
         ( COL )
# 361 "lexer.ml"

  | 19 ->
# 103 "lexer.mll"
         ( COL_EQ )
# 366 "lexer.ml"

  | 20 ->
# 104 "lexer.mll"
         ( SEMICOL )
# 371 "lexer.ml"

  | 21 ->
# 105 "lexer.mll"
         ( LT )
# 376 "lexer.ml"

  | 22 ->
# 106 "lexer.mll"
         ( LT_MINUS_MINUS )
# 381 "lexer.ml"

  | 23 ->
# 107 "lexer.mll"
         ( LT_EQ )
# 386 "lexer.ml"

  | 24 ->
# 108 "lexer.mll"
         ( EQ )
# 391 "lexer.ml"

  | 25 ->
# 110 "lexer.mll"
         ( GT )
# 396 "lexer.ml"

  | 26 ->
# 111 "lexer.mll"
         ( GT_EQ )
# 401 "lexer.ml"

  | 27 ->
# 112 "lexer.mll"
         ( LCURLY )
# 406 "lexer.ml"

  | 28 ->
# 114 "lexer.mll"
         ( PIPE_MINUS_GT )
# 411 "lexer.ml"

  | 29 ->
# 115 "lexer.mll"
         ( RCURLY )
# 416 "lexer.ml"

  | 30 ->
let
# 120 "lexer.mll"
                          lxm
# 422 "lexer.ml"
= Lexing.sub_lexeme lexbuf lexbuf.Lexing.lex_start_pos lexbuf.Lexing.lex_curr_pos in
# 120 "lexer.mll"
                               ( INT_LITERAL(lxm) )
# 426 "lexer.ml"

  | 31 ->
let
# 124 "lexer.mll"
                lxm
# 432 "lexer.ml"
= Lexing.sub_lexeme lexbuf lexbuf.Lexing.lex_start_pos lexbuf.Lexing.lex_curr_pos in
# 125 "lexer.mll"
  ( match Hashtbl.find_opt keyword_table lxm with
    | Some kw -> kw
    | None -> IDENT(lxm) )
# 438 "lexer.ml"

  | 32 ->
# 131 "lexer.mll"
                           ( (Lexing.new_line lexbuf) ; (token lexbuf) )
# 443 "lexer.ml"

  | 33 ->
# 132 "lexer.mll"
                       ( token lexbuf )
# 448 "lexer.ml"

  | 34 ->
# 135 "lexer.mll"
                       ( comment_line lexbuf )
# 453 "lexer.ml"

  | 35 ->
# 136 "lexer.mll"
                       ( comment lexbuf )
# 458 "lexer.ml"

  | 36 ->
# 140 "lexer.mll"
                       ( EOF )
# 463 "lexer.ml"

  | 37 ->
let
# 144 "lexer.mll"
       lxm
# 469 "lexer.ml"
= Lexing.sub_lexeme_char lexbuf lexbuf.Lexing.lex_start_pos in
# 144 "lexer.mll"
                       ( error_exit (pos ()) (Printf.sprintf "Unexpected character: %c"  lxm) )
# 473 "lexer.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf;
      __ocaml_lex_token_rec lexbuf __ocaml_lex_state

and comment lexbuf =
   __ocaml_lex_comment_rec lexbuf 68
and __ocaml_lex_comment_rec lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
# 147 "lexer.mll"
           ( token lexbuf )
# 485 "lexer.ml"

  | 1 ->
# 148 "lexer.mll"
                          ( (Lexing.new_line lexbuf) ; (comment lexbuf) )
# 490 "lexer.ml"

  | 2 ->
# 149 "lexer.mll"
           ( comment lexbuf )
# 495 "lexer.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf;
      __ocaml_lex_comment_rec lexbuf __ocaml_lex_state

and comment_line lexbuf =
   __ocaml_lex_comment_line_rec lexbuf 73
and __ocaml_lex_comment_line_rec lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
# 152 "lexer.mll"
                          ( (Lexing.new_line lexbuf) ; (token lexbuf) )
# 507 "lexer.ml"

  | 1 ->
# 153 "lexer.mll"
                          ( comment_line lexbuf )
# 512 "lexer.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf;
      __ocaml_lex_comment_line_rec lexbuf __ocaml_lex_state

;;

